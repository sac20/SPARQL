{"id":"node_modules/readable-to-readable/index.js","dependencies":[{"name":"/home/osdajigu/SPARQL/package.json","includedInParent":true,"mtime":1656012431902},{"name":"/home/osdajigu/SPARQL/node_modules/readable-to-readable/package.json","includedInParent":true,"mtime":1656013467832},{"name":"readable-stream","loc":{"line":1,"column":39,"index":39},"parent":"/home/osdajigu/SPARQL/node_modules/readable-to-readable/index.js","resolved":"/home/osdajigu/SPARQL/node_modules/readable-stream/readable-browser.js"}],"generated":{"js":"const { finished, Readable } = require('readable-stream')\n\nfunction nextLoop () {\n  return new Promise(resolve => setTimeout(resolve, 0))\n}\n\nclass ReadableToReadable extends Readable {\n  constructor (input, { end = true, map, ...args } = {}) {\n    super({\n      read: ReadableToReadable.readFrom(input, { end, map }),\n      ...args\n    })\n  }\n\n  static readFrom (input, { end = true, map = v => v } = {}) {\n    let done = false\n\n    finished(input, () => {\n      done = true\n    })\n\n    const read = async function () {\n      while (true) {\n        const chunk = input.read()\n\n        if (!chunk) {\n          if (done && end) {\n            this.push(null)\n          }\n\n          if (done) {\n            return true\n          }\n\n          await nextLoop()\n        } else {\n          if (!this.push(map(chunk))) {\n            return false\n          }\n        }\n      }\n    }\n\n    return read\n  }\n}\n\nmodule.exports = ReadableToReadable\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/readable-to-readable/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/readable-to-readable/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}}],"sources":{"node_modules/readable-to-readable/index.js":"const { finished, Readable } = require('readable-stream')\n\nfunction nextLoop () {\n  return new Promise(resolve => setTimeout(resolve, 0))\n}\n\nclass ReadableToReadable extends Readable {\n  constructor (input, { end = true, map, ...args } = {}) {\n    super({\n      read: ReadableToReadable.readFrom(input, { end, map }),\n      ...args\n    })\n  }\n\n  static readFrom (input, { end = true, map = v => v } = {}) {\n    let done = false\n\n    finished(input, () => {\n      done = true\n    })\n\n    const read = async function () {\n      while (true) {\n        const chunk = input.read()\n\n        if (!chunk) {\n          if (done && end) {\n            this.push(null)\n          }\n\n          if (done) {\n            return true\n          }\n\n          await nextLoop()\n        } else {\n          if (!this.push(map(chunk))) {\n            return false\n          }\n        }\n      }\n    }\n\n    return read\n  }\n}\n\nmodule.exports = ReadableToReadable\n"},"lineCount":49}},"error":null,"hash":"197fee63c4b0bdc481ad4724fc90883d","cacheData":{"env":{}}}
{"id":"node_modules/sparql-http-client/BaseClient.js","dependencies":[{"name":"/home/sebastian/Documents/proyecto2022/sparql/package.json","includedInParent":true,"mtime":1656026549273},{"name":"/home/sebastian/Documents/proyecto2022/sparql/node_modules/sparql-http-client/package.json","includedInParent":true,"mtime":1655989915065}],"generated":{"js":"/**\n * An abstract base client which connects the query, store and endpoint together\n *\n * Store and Query parameters are both optional and only necessary when the client will connect to SPARQL Graph Store\n * or SPARQL Query endpoints respectively\n *\n * @class\n */\nclass BaseClient {\n  /**\n   * @param {Object} init\n   * @param {Endpoint} init.endpoint object to connect to SPARQL endpoint\n   * @param {Query} [init.Query] SPARQL Query/Update executor constructor\n   * @param {Store} [init.Store] SPARQL Graph Store connector constructor\n   * @param {factory} [init.factory] RDF/JS DataFactory\n   * @param {{...(key:value)}} [init.options] any additional arguments passed to Query and Store constructors\n   */\n  constructor ({ endpoint, Query, Store, factory, ...options }) {\n    /** @member {RawQuery} */\n    this.query = Query ? new Query({ endpoint, factory, ...options }) : null\n    /** @member {StreamStore} */\n    this.store = Store ? new Store({ endpoint, factory, ...options }) : null\n  }\n}\n\nmodule.exports = BaseClient\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/sparql-http-client/BaseClient.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"node_modules/sparql-http-client/BaseClient.js":"/**\n * An abstract base client which connects the query, store and endpoint together\n *\n * Store and Query parameters are both optional and only necessary when the client will connect to SPARQL Graph Store\n * or SPARQL Query endpoints respectively\n *\n * @class\n */\nclass BaseClient {\n  /**\n   * @param {Object} init\n   * @param {Endpoint} init.endpoint object to connect to SPARQL endpoint\n   * @param {Query} [init.Query] SPARQL Query/Update executor constructor\n   * @param {Store} [init.Store] SPARQL Graph Store connector constructor\n   * @param {factory} [init.factory] RDF/JS DataFactory\n   * @param {{...(key:value)}} [init.options] any additional arguments passed to Query and Store constructors\n   */\n  constructor ({ endpoint, Query, Store, factory, ...options }) {\n    /** @member {RawQuery} */\n    this.query = Query ? new Query({ endpoint, factory, ...options }) : null\n    /** @member {StreamStore} */\n    this.store = Store ? new Store({ endpoint, factory, ...options }) : null\n  }\n}\n\nmodule.exports = BaseClient\n"},"lineCount":27}},"error":null,"hash":"b4990c88cc185c94be1b11a3eacf4a04","cacheData":{"env":{}}}
{"id":"node_modules/rdf-transform-triple-to-quad/index.js","dependencies":[{"name":"/home/osdajigu/test_sparql/package.json","includedInParent":true,"mtime":1656005416952},{"name":"/home/osdajigu/test_sparql/node_modules/rdf-transform-triple-to-quad/package.json","includedInParent":true,"mtime":1655993721781},{"name":"@rdfjs/data-model","loc":{"line":1,"column":20,"index":20},"parent":"/home/osdajigu/test_sparql/node_modules/rdf-transform-triple-to-quad/index.js","resolved":"/home/osdajigu/test_sparql/node_modules/@rdfjs/data-model/index.js"},{"name":"readable-stream","loc":{"line":2,"column":26,"index":67},"parent":"/home/osdajigu/test_sparql/node_modules/rdf-transform-triple-to-quad/index.js","resolved":"/home/osdajigu/test_sparql/node_modules/readable-stream/readable-browser.js"}],"generated":{"js":"const rdf = require('@rdfjs/data-model')\nconst Transform = require('readable-stream').Transform\n\nclass TripleToQuadTransform extends Transform {\n  constructor (graph, options) {\n    super()\n\n    options = options || {}\n\n    this._writableState.objectMode = true\n    this._readableState.objectMode = true\n\n    this.factory = options.factory || rdf\n    this.graph = graph || this.factory.defaultGraph()\n\n    this.on('pipe', (input) => {\n      input.on('error', (err) => {\n        this.emit('error', err)\n      })\n    })\n  }\n\n  _transform (quad, encoding, done) {\n    this.push(this.factory.quad(quad.subject, quad.predicate, quad.object, this.graph))\n\n    done()\n  }\n}\n\nmodule.exports = TripleToQuadTransform\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rdf-transform-triple-to-quad/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}}],"sources":{"node_modules/rdf-transform-triple-to-quad/index.js":"const rdf = require('@rdfjs/data-model')\nconst Transform = require('readable-stream').Transform\n\nclass TripleToQuadTransform extends Transform {\n  constructor (graph, options) {\n    super()\n\n    options = options || {}\n\n    this._writableState.objectMode = true\n    this._readableState.objectMode = true\n\n    this.factory = options.factory || rdf\n    this.graph = graph || this.factory.defaultGraph()\n\n    this.on('pipe', (input) => {\n      input.on('error', (err) => {\n        this.emit('error', err)\n      })\n    })\n  }\n\n  _transform (quad, encoding, done) {\n    this.push(this.factory.quad(quad.subject, quad.predicate, quad.object, this.graph))\n\n    done()\n  }\n}\n\nmodule.exports = TripleToQuadTransform\n"},"lineCount":31}},"error":null,"hash":"ef7b849855f1c521fa1989c40379d5a1","cacheData":{"env":{}}}
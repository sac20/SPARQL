{"id":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","dependencies":[{"name":"/home/osdajigu/SPARQL/package.json","includedInParent":true,"mtime":1656012431902},{"name":"/home/osdajigu/SPARQL/node_modules/@rdfjs/parser-n3/package.json","includedInParent":true,"mtime":1656013467862},{"name":"n3","loc":{"line":1,"column":19,"index":19},"parent":"/home/osdajigu/SPARQL/node_modules/@rdfjs/parser-n3/lib/ParserStream.js","resolved":"/home/osdajigu/SPARQL/node_modules/n3/src/index.js"},{"name":"@rdfjs/data-model","loc":{"line":2,"column":20,"index":45},"parent":"/home/osdajigu/SPARQL/node_modules/@rdfjs/parser-n3/lib/ParserStream.js","resolved":"/home/osdajigu/SPARQL/node_modules/@rdfjs/data-model/index.js"},{"name":"readable-stream","loc":{"line":3,"column":29,"index":95},"parent":"/home/osdajigu/SPARQL/node_modules/@rdfjs/parser-n3/lib/ParserStream.js","resolved":"/home/osdajigu/SPARQL/node_modules/readable-stream/readable-browser.js"},{"name":"readable-to-readable","loc":{"line":4,"column":35,"index":149},"parent":"/home/osdajigu/SPARQL/node_modules/@rdfjs/parser-n3/lib/ParserStream.js","resolved":"/home/osdajigu/SPARQL/node_modules/readable-to-readable/index.js"}],"generated":{"js":"const N3 = require('n3')\nconst rdf = require('@rdfjs/data-model')\nconst { finished } = require('readable-stream')\nconst ReadableToReadable = require('readable-to-readable')\n\nclass ParserStream extends ReadableToReadable {\n  constructor (input, { baseIRI = '', factory = rdf } = {}) {\n    const parser = new N3.StreamParser({ baseIRI, factory })\n\n    super(parser, { objectMode: true })\n\n    parser.on('prefix', (prefix, term) => {\n      this.emit('prefix', prefix, term)\n    })\n\n    parser.on('error', err => {\n      this.destroy(err)\n    })\n\n    finished(this, () => {\n      parser.end()\n    })\n\n    input.pipe(parser)\n  }\n}\n\nmodule.exports = ParserStream\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@rdfjs/parser-n3/lib/ParserStream.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}}],"sources":{"node_modules/@rdfjs/parser-n3/lib/ParserStream.js":"const N3 = require('n3')\nconst rdf = require('@rdfjs/data-model')\nconst { finished } = require('readable-stream')\nconst ReadableToReadable = require('readable-to-readable')\n\nclass ParserStream extends ReadableToReadable {\n  constructor (input, { baseIRI = '', factory = rdf } = {}) {\n    const parser = new N3.StreamParser({ baseIRI, factory })\n\n    super(parser, { objectMode: true })\n\n    parser.on('prefix', (prefix, term) => {\n      this.emit('prefix', prefix, term)\n    })\n\n    parser.on('error', err => {\n      this.destroy(err)\n    })\n\n    finished(this, () => {\n      parser.end()\n    })\n\n    input.pipe(parser)\n  }\n}\n\nmodule.exports = ParserStream\n"},"lineCount":29}},"error":null,"hash":"8497542b02cbb3a641a8733cc8934c48","cacheData":{"env":{}}}
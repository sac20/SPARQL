{"id":"node_modules/sparql-http-client/Endpoint.js","dependencies":[{"name":"/home/osdajigu/test_sparql/package.json","includedInParent":true,"mtime":1656005416952},{"name":"/home/osdajigu/test_sparql/node_modules/sparql-http-client/package.json","includedInParent":true,"mtime":1655993721831},{"name":"nodeify-fetch","loc":{"line":1,"column":29,"index":29},"parent":"/home/osdajigu/test_sparql/node_modules/sparql-http-client/Endpoint.js","resolved":"/home/osdajigu/test_sparql/node_modules/nodeify-fetch/browser.js"},{"name":"buffer","parent":"/home/osdajigu/test_sparql/node_modules/sparql-http-client/Endpoint.js","resolved":"/home/osdajigu/.nvm/versions/node/v16.0.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nconst defaultFetch = require('nodeify-fetch')\n\n/**\n * Represents a SPARQL endpoint and exposes a low-level methods, close to the underlying HTTP interface\n *\n * It directly returns HTTP response objects\n */\nclass Endpoint {\n  /**\n   * @param {Object} init\n   * @param {string} init.endpointUrl SPARQL Query endpoint URL\n   * @param {fetch} [init.fetch=nodeify-fetch] fetch implementation\n   * @param {HeadersInit} [init.headers] HTTP headers to send with every endpoint request\n   * @param {string} [init.password] password used for basic authentication\n   * @param {string} [init.storeUrl] Graph Store URL\n   * @param {string} [init.updateUrl] SPARQL Update endpoint URL\n   * @param {string} [init.user] user used for basic authentication\n   */\n  constructor ({ endpointUrl, fetch, headers, password, storeUrl, updateUrl, user }) {\n    this.endpointUrl = endpointUrl\n    this.fetch = fetch || defaultFetch\n    this.headers = new this.fetch.Headers(headers)\n    this.storeUrl = storeUrl\n    this.updateUrl = updateUrl\n\n    if (typeof user === 'string' && typeof password === 'string') {\n      this.headers.set('authorization', 'Basic ' + Buffer.from(`${user}:${password}`).toString('base64'))\n    }\n  }\n\n  /**\n   * Sends the query as GET request with query string\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n  async get (query, { headers, update = false } = {}) {\n    let url = null\n\n    if (!update) {\n      url = new URL(this.endpointUrl)\n      url.searchParams.append('query', query)\n    } else {\n      url = new URL(this.updateUrl)\n      url.searchParams.append('update', query)\n    }\n\n    return this.fetch(url.toString().replace(/\\+/g, '%20'), {\n      method: 'GET',\n      headers: this.mergeHeaders(headers)\n    })\n  }\n\n  /**\n   * Sends the query as POST request with application/sparql-query body\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n  async postDirect (query, { headers, update = false } = {}) {\n    let url = null\n\n    if (!update) {\n      url = new URL(this.endpointUrl)\n    } else {\n      url = new URL(this.updateUrl)\n    }\n\n    headers = this.mergeHeaders(headers)\n\n    if (!headers.has('content-type')) {\n      headers.set('content-type', 'application/sparql-query; charset=utf-8')\n    }\n\n    return this.fetch(url, {\n      method: 'POST',\n      headers,\n      body: query\n    })\n  }\n\n  /**\n   * Sends the query as POST request with application/x-www-form-urlencoded body\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n  async postUrlencoded (query, { headers, update = false } = {}) {\n    let url = null\n    let body = null\n\n    if (!update) {\n      url = new URL(this.endpointUrl)\n      body = 'query=' + encodeURIComponent(query)\n    } else {\n      url = new URL(this.updateUrl)\n      body = 'update=' + encodeURIComponent(query)\n    }\n\n    headers = this.mergeHeaders(headers)\n\n    if (!headers.has('content-type')) {\n      headers.set('content-type', 'application/x-www-form-urlencoded')\n    }\n\n    return this.fetch(url, {\n      method: 'POST',\n      headers,\n      body\n    })\n  }\n\n  mergeHeaders (args = {}) {\n    const merged = new this.fetch.Headers()\n\n    // client headers\n    for (const [key, value] of this.headers) {\n      merged.set(key, value)\n    }\n\n    // argument headers\n    for (const [key, value] of new this.fetch.Headers(args)) {\n      merged.set(key, value)\n    }\n\n    return merged\n  }\n}\n\nmodule.exports = Endpoint\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/sparql-http-client/Endpoint.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}}],"sources":{"node_modules/sparql-http-client/Endpoint.js":"const defaultFetch = require('nodeify-fetch')\n\n/**\n * Represents a SPARQL endpoint and exposes a low-level methods, close to the underlying HTTP interface\n *\n * It directly returns HTTP response objects\n */\nclass Endpoint {\n  /**\n   * @param {Object} init\n   * @param {string} init.endpointUrl SPARQL Query endpoint URL\n   * @param {fetch} [init.fetch=nodeify-fetch] fetch implementation\n   * @param {HeadersInit} [init.headers] HTTP headers to send with every endpoint request\n   * @param {string} [init.password] password used for basic authentication\n   * @param {string} [init.storeUrl] Graph Store URL\n   * @param {string} [init.updateUrl] SPARQL Update endpoint URL\n   * @param {string} [init.user] user used for basic authentication\n   */\n  constructor ({ endpointUrl, fetch, headers, password, storeUrl, updateUrl, user }) {\n    this.endpointUrl = endpointUrl\n    this.fetch = fetch || defaultFetch\n    this.headers = new this.fetch.Headers(headers)\n    this.storeUrl = storeUrl\n    this.updateUrl = updateUrl\n\n    if (typeof user === 'string' && typeof password === 'string') {\n      this.headers.set('authorization', 'Basic ' + Buffer.from(`${user}:${password}`).toString('base64'))\n    }\n  }\n\n  /**\n   * Sends the query as GET request with query string\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n  async get (query, { headers, update = false } = {}) {\n    let url = null\n\n    if (!update) {\n      url = new URL(this.endpointUrl)\n      url.searchParams.append('query', query)\n    } else {\n      url = new URL(this.updateUrl)\n      url.searchParams.append('update', query)\n    }\n\n    return this.fetch(url.toString().replace(/\\+/g, '%20'), {\n      method: 'GET',\n      headers: this.mergeHeaders(headers)\n    })\n  }\n\n  /**\n   * Sends the query as POST request with application/sparql-query body\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n  async postDirect (query, { headers, update = false } = {}) {\n    let url = null\n\n    if (!update) {\n      url = new URL(this.endpointUrl)\n    } else {\n      url = new URL(this.updateUrl)\n    }\n\n    headers = this.mergeHeaders(headers)\n\n    if (!headers.has('content-type')) {\n      headers.set('content-type', 'application/sparql-query; charset=utf-8')\n    }\n\n    return this.fetch(url, {\n      method: 'POST',\n      headers,\n      body: query\n    })\n  }\n\n  /**\n   * Sends the query as POST request with application/x-www-form-urlencoded body\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n  async postUrlencoded (query, { headers, update = false } = {}) {\n    let url = null\n    let body = null\n\n    if (!update) {\n      url = new URL(this.endpointUrl)\n      body = 'query=' + encodeURIComponent(query)\n    } else {\n      url = new URL(this.updateUrl)\n      body = 'update=' + encodeURIComponent(query)\n    }\n\n    headers = this.mergeHeaders(headers)\n\n    if (!headers.has('content-type')) {\n      headers.set('content-type', 'application/x-www-form-urlencoded')\n    }\n\n    return this.fetch(url, {\n      method: 'POST',\n      headers,\n      body\n    })\n  }\n\n  mergeHeaders (args = {}) {\n    const merged = new this.fetch.Headers()\n\n    // client headers\n    for (const [key, value] of this.headers) {\n      merged.set(key, value)\n    }\n\n    // argument headers\n    for (const [key, value] of new this.fetch.Headers(args)) {\n      merged.set(key, value)\n    }\n\n    return merged\n  }\n}\n\nmodule.exports = Endpoint\n"},"lineCount":138}},"error":null,"hash":"76063795b30c6d5fe99e13a109677a1c","cacheData":{"env":{}}}